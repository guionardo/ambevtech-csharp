{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Curso de desenvolvimento em c-sharp, para cobolistas!","title":"Index"},{"location":"#curso-de-desenvolvimento-em-c-sharp-para-cobolistas","text":"","title":"Curso de desenvolvimento em c-sharp, para cobolistas!"},{"location":"02.objetivo/","text":"Teste Mermaid flowchart Root A B C gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid excludes weekends %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".) section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d Functionality added :milestone, 2014-01-25, 0d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page :20h Add another diagram to demo page :48h","title":"Teste Mermaid"},{"location":"02.objetivo/#teste-mermaid","text":"flowchart Root A B C gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid excludes weekends %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".) section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d Functionality added :milestone, 2014-01-25, 0d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page :20h Add another diagram to demo page :48h","title":"Teste Mermaid"},{"location":"00/links/","text":"Links Links compartilhados nas nossas conversas Welcome to C# 11 Degreed Trilha C# Youtube: Canal Azure na Pr\u00e1tica Youtube: Twelve-Factor App: Boas Pr\u00e1ticas na Nuvem Trabalhar com a LINQ (Consulta Integrada \u00e0 Linguagem) Backend Developer Roadmap for .NET Developers. (2023 Edition) \ud83d\ude80","title":"Links"},{"location":"00/links/#links","text":"Links compartilhados nas nossas conversas Welcome to C# 11 Degreed Trilha C# Youtube: Canal Azure na Pr\u00e1tica Youtube: Twelve-Factor App: Boas Pr\u00e1ticas na Nuvem Trabalhar com a LINQ (Consulta Integrada \u00e0 Linguagem) Backend Developer Roadmap for .NET Developers. (2023 Edition) \ud83d\ude80","title":"Links"},{"location":"00/objetivos/","text":"Objetivo Desenvolver uma nova linguagem de programa\u00e7\u00e3o (c#) para as pessoas de nossa torre, que conhecem apenas Cobol, e precisam desenvolver uma nova linguagem de programa\u00e7\u00e3o. Como faremos Come\u00e7aremos com um piloto\u200b M\u00e9dia de 5 pessoas por turma\u200b Linguagem a ser ensinada: c#\u200b Pre Requisito: conhecer apenas Cobol\u200b Quando: toda sexta feira das 13:30 as 16:30\u200b Treinamento ser\u00e1 gravado\u200b Dura\u00e7\u00e3o M\u00e9dia: 3 meses\u200b Instrutor: Furlan Nosso compromisso Direcionar essas pessoas para equipes que desenvolvam em c#, para que possam dar continuidade ao aprendizado.\u200b Pauta Falar sobre a estrutura b\u00e1sica:\u200b Tipos primitivos, acessibilidade, fun\u00e7\u00f5es, classes, records, heran\u00e7a, gen\u00e9ricos, strings\u200b \u200b2. Construir um Worker na pratica com toda a galera\u200b D\u00favidas poder\u00e3o ser tiradas via chat Roadmap","title":"Objetivo"},{"location":"00/objetivos/#objetivo","text":"Desenvolver uma nova linguagem de programa\u00e7\u00e3o (c#) para as pessoas de nossa torre, que conhecem apenas Cobol, e precisam desenvolver uma nova linguagem de programa\u00e7\u00e3o.","title":"Objetivo"},{"location":"00/objetivos/#como-faremos","text":"Come\u00e7aremos com um piloto\u200b M\u00e9dia de 5 pessoas por turma\u200b Linguagem a ser ensinada: c#\u200b Pre Requisito: conhecer apenas Cobol\u200b Quando: toda sexta feira das 13:30 as 16:30\u200b Treinamento ser\u00e1 gravado\u200b Dura\u00e7\u00e3o M\u00e9dia: 3 meses\u200b Instrutor: Furlan","title":"Como faremos"},{"location":"00/objetivos/#nosso-compromisso","text":"Direcionar essas pessoas para equipes que desenvolvam em c#, para que possam dar continuidade ao aprendizado.\u200b","title":"Nosso compromisso"},{"location":"00/objetivos/#pauta","text":"Falar sobre a estrutura b\u00e1sica:\u200b Tipos primitivos, acessibilidade, fun\u00e7\u00f5es, classes, records, heran\u00e7a, gen\u00e9ricos, strings\u200b \u200b2. Construir um Worker na pratica com toda a galera\u200b D\u00favidas poder\u00e3o ser tiradas via chat","title":"Pauta"},{"location":"00/objetivos/#roadmap","text":"","title":"Roadmap"},{"location":"00/readme/","text":"Nerd Fonts This is an archived font from a Nerd Fonts release. For more information see: * https://github.com/ryanoasis/nerd-fonts/ * https://github.com/ryanoasis/nerd-fonts/releases/latest/","title":"Nerd Fonts"},{"location":"00/readme/#nerd-fonts","text":"This is an archived font from a Nerd Fonts release. For more information see: * https://github.com/ryanoasis/nerd-fonts/ * https://github.com/ryanoasis/nerd-fonts/releases/latest/","title":"Nerd Fonts"},{"location":"00/setup/","text":"Setup do ambiente de desenvolvimento Visual Studio Para este curso, utilizaremos o Visual Studio Professional, dispon\u00edvel neste link . Aten\u00e7\u00e3o Assegure-se de fazer o download da vers\u00e3o Professional Detalhes da instala\u00e7\u00e3o: ASP.NET e desenvolvimento Web Ap\u00f3s a instala\u00e7\u00e3o, entre em contato com sua coordena\u00e7\u00e3o e solicite a licen\u00e7a de uso do Visual Studio. WSL2 - Windows Subsystem for Linux v2 Siga as orienta\u00e7\u00f5es deste link e certifique-se de estar usando a vers\u00e3o 2 do WSL. A distro padr\u00e3o \u00e9 Ubuntu , e se voc\u00ea ainda n\u00e3o tem experi\u00eancia no mundo do pinguim, ela j\u00e1 vai atender todas as espectativas desse curso. Docker As depend\u00eancias que utilizaremos ser\u00e3o mais f\u00e1ceis de administrar se utilizarmos conteiners. O setup a seguir instalar\u00e1 o docker dentro da inst\u00e2ncia linux do WSL2. Tutorial original dispon\u00edvel nesse link . Disponibilizei este script para facilitar a tarefa de configura\u00e7\u00e3o do docker. Basta executar o comando abaixo no console bash do seu Ubuntu/WSL2 e acompanhar a execu\u00e7\u00e3o: curl https://raw.githubusercontent.com/guionardo/ambevtech-csharp/main/docs/00/setup.sh | sudo bash SCRIPT Instale os pr\u00e9-requisitos: sudo apt update && sudo apt upgrade sudo apt remove docker docker-engine docker.io containerd runc sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg \\ lsb-release Adicione o reposit\u00f3rio do Docker na lista de sources do Ubuntu: bash curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/ docker-archive-keyring.gpg echo \\ \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ ubuntu \\ $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null Instale o Docker Engine bash sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin D\u00ea permiss\u00e3o para rodar o Docker com seu usu\u00e1rio corrente: bash sudo usermod -aG docker $USER Inicie o servi\u00e7o do Docker: bash sudo service docker start Este comando acima ter\u00e1 que ser executado toda vez que Linux for reiniciado. Se caso o servi\u00e7o do Docker n\u00e3o estiver executando, mostrar\u00e1 esta mensagem de erro ao rodar comando docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running? O Docker Compose instalado agora estar\u00e1 na vers\u00e3o 2, para executa-lo em vez de docker-compose use docker compose.","title":"Setup"},{"location":"00/setup/#setup-do-ambiente-de-desenvolvimento","text":"","title":"Setup do ambiente de desenvolvimento"},{"location":"00/setup/#visual-studio","text":"Para este curso, utilizaremos o Visual Studio Professional, dispon\u00edvel neste link . Aten\u00e7\u00e3o Assegure-se de fazer o download da vers\u00e3o Professional Detalhes da instala\u00e7\u00e3o: ASP.NET e desenvolvimento Web Ap\u00f3s a instala\u00e7\u00e3o, entre em contato com sua coordena\u00e7\u00e3o e solicite a licen\u00e7a de uso do Visual Studio.","title":"Visual Studio"},{"location":"00/setup/#wsl2-windows-subsystem-for-linux-v2","text":"Siga as orienta\u00e7\u00f5es deste link e certifique-se de estar usando a vers\u00e3o 2 do WSL. A distro padr\u00e3o \u00e9 Ubuntu , e se voc\u00ea ainda n\u00e3o tem experi\u00eancia no mundo do pinguim, ela j\u00e1 vai atender todas as espectativas desse curso.","title":"WSL2 - Windows Subsystem for Linux v2"},{"location":"00/setup/#docker","text":"As depend\u00eancias que utilizaremos ser\u00e3o mais f\u00e1ceis de administrar se utilizarmos conteiners. O setup a seguir instalar\u00e1 o docker dentro da inst\u00e2ncia linux do WSL2. Tutorial original dispon\u00edvel nesse link . Disponibilizei este script para facilitar a tarefa de configura\u00e7\u00e3o do docker. Basta executar o comando abaixo no console bash do seu Ubuntu/WSL2 e acompanhar a execu\u00e7\u00e3o: curl https://raw.githubusercontent.com/guionardo/ambevtech-csharp/main/docs/00/setup.sh | sudo bash SCRIPT Instale os pr\u00e9-requisitos: sudo apt update && sudo apt upgrade sudo apt remove docker docker-engine docker.io containerd runc sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg \\ lsb-release Adicione o reposit\u00f3rio do Docker na lista de sources do Ubuntu: bash curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/ docker-archive-keyring.gpg echo \\ \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ ubuntu \\ $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null Instale o Docker Engine bash sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin D\u00ea permiss\u00e3o para rodar o Docker com seu usu\u00e1rio corrente: bash sudo usermod -aG docker $USER Inicie o servi\u00e7o do Docker: bash sudo service docker start Este comando acima ter\u00e1 que ser executado toda vez que Linux for reiniciado. Se caso o servi\u00e7o do Docker n\u00e3o estiver executando, mostrar\u00e1 esta mensagem de erro ao rodar comando docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running? O Docker Compose instalado agora estar\u00e1 na vers\u00e3o 2, para executa-lo em vez de docker-compose use docker compose.","title":"Docker"},{"location":"00/sources/","text":"Fontes dos projetos Link","title":"Fontes"},{"location":"00/sources/#fontes-dos-projetos","text":"Link","title":"Fontes dos projetos"},{"location":"01/bases_01/","text":"Bases da linguagem Tipos de dados Aten\u00e7\u00e3o Em C#, tudo \u00e9 objeto, mesmo um byte. Tipos primitivos value types Vari\u00e1veis de tipo de valor ( value type ) cont\u00e9m a inst\u00e2ncia do tipo. Por padr\u00e3o, ao ser atribu\u00eddo, passado como argumento para um m\u00e9todo, ou retornando como resultado de um m\u00e9todo, os valores s\u00e3o copiados. N\u00fameros inteiros Tipo Range Tamanho (bits) .Net type sbyte -128 a 127 8 System.SByte byte 0 a 255 8 System.Byte short -32768 a 32767 16 System.Int16 ushort 0 a 65535 16 System.UInt16 int -2,147,483,648 a 2,147,483,647 32 System.Int32 uint 0 a 4,294,967,295 32 System.UInt32 long -9,223,372,036,854,775,808 a 9,223,372,036,854,775,807 64 System.Int64 ulong 0 a 18,446,744,073,709,551,615 64 System.UInt64 nint Depende da plataforma (computado em runtime) 32/64 System.IntPtr nuint Depende da plataforma (computado em runtime) 32/64 System.UIntPtr N\u00fameros de ponto flutuante Tipo Range aproximado Precis\u00e3o (d\u00edgitos) Tamanho (bytes) .Net type float \u00b11.5E\u221245 a \u00b13.4E38 ~6-9 4 System.Single double \u00b15.0E\u2212324 a \u00b11.7E308 ~15-17 8 System.Double decimal \u00b11.0E-28 a \u00b17.9228E28 28-29 16 System.Decimal Boolean Tipo Valores bool true, false bool? true, false, null Char Tipo Range Tamanho (bits) .Net type char U+0000 a U+FFFF 16 System.Char Enum Enumera\u00e7\u00e3o, ou uma forma de criar um tipo com constantes definidas, associadas a um tipo inteiro. enum Estacoes { Primavera, Verao, Outono, Inverno } enum HTTPStatus: ushort { OK = 200, Created = 201, Accepted = 202, BadRequest = 400, NotFound = 404 } Struct Struct (de structure) \u00e9 um tipo de valor que encapsula dados de tipos variados e funcionalidade relacionada. H\u00e1 uma aparente semelhan\u00e7a com as classes que ser\u00e3o vistas adiante. public struct Coords { public Coords(double x, double y) { X = x; Y = y; } public double X { get; } public double Y { get; } public override string ToString() => $\"({X}, {Y})\"; }","title":"Bases 1"},{"location":"01/bases_01/#bases-da-linguagem","text":"","title":"Bases da linguagem"},{"location":"01/bases_01/#tipos-de-dados","text":"Aten\u00e7\u00e3o Em C#, tudo \u00e9 objeto, mesmo um byte.","title":"Tipos de dados"},{"location":"01/bases_01/#tipos-primitivos-value-types","text":"Vari\u00e1veis de tipo de valor ( value type ) cont\u00e9m a inst\u00e2ncia do tipo. Por padr\u00e3o, ao ser atribu\u00eddo, passado como argumento para um m\u00e9todo, ou retornando como resultado de um m\u00e9todo, os valores s\u00e3o copiados.","title":"Tipos primitivos value types"},{"location":"01/bases_01/#numeros-inteiros","text":"Tipo Range Tamanho (bits) .Net type sbyte -128 a 127 8 System.SByte byte 0 a 255 8 System.Byte short -32768 a 32767 16 System.Int16 ushort 0 a 65535 16 System.UInt16 int -2,147,483,648 a 2,147,483,647 32 System.Int32 uint 0 a 4,294,967,295 32 System.UInt32 long -9,223,372,036,854,775,808 a 9,223,372,036,854,775,807 64 System.Int64 ulong 0 a 18,446,744,073,709,551,615 64 System.UInt64 nint Depende da plataforma (computado em runtime) 32/64 System.IntPtr nuint Depende da plataforma (computado em runtime) 32/64 System.UIntPtr","title":"N\u00fameros inteiros"},{"location":"01/bases_01/#numeros-de-ponto-flutuante","text":"Tipo Range aproximado Precis\u00e3o (d\u00edgitos) Tamanho (bytes) .Net type float \u00b11.5E\u221245 a \u00b13.4E38 ~6-9 4 System.Single double \u00b15.0E\u2212324 a \u00b11.7E308 ~15-17 8 System.Double decimal \u00b11.0E-28 a \u00b17.9228E28 28-29 16 System.Decimal","title":"N\u00fameros de ponto flutuante"},{"location":"01/bases_01/#boolean","text":"Tipo Valores bool true, false bool? true, false, null","title":"Boolean"},{"location":"01/bases_01/#char","text":"Tipo Range Tamanho (bits) .Net type char U+0000 a U+FFFF 16 System.Char","title":"Char"},{"location":"01/bases_01/#enum","text":"Enumera\u00e7\u00e3o, ou uma forma de criar um tipo com constantes definidas, associadas a um tipo inteiro. enum Estacoes { Primavera, Verao, Outono, Inverno } enum HTTPStatus: ushort { OK = 200, Created = 201, Accepted = 202, BadRequest = 400, NotFound = 404 }","title":"Enum"},{"location":"01/bases_01/#struct","text":"Struct (de structure) \u00e9 um tipo de valor que encapsula dados de tipos variados e funcionalidade relacionada. H\u00e1 uma aparente semelhan\u00e7a com as classes que ser\u00e3o vistas adiante. public struct Coords { public Coords(double x, double y) { X = x; Y = y; } public double X { get; } public double Y { get; } public override string ToString() => $\"({X}, {Y})\"; }","title":"Struct"},{"location":"01/bases_02/","text":"Bases da linguagem Tipos de Refer\u00eancia ( Reference Types ) Os tipos de refer\u00eancia s\u00e3o ponteiros para os dados, e ao contr\u00e1rio dos value types , durante a atribui\u00e7\u00e3o, passagem por par\u00e2metro ou retorno de fun\u00e7\u00e3o, somente o endere\u00e7o do dado \u00e9 transmitido. Strings Tipo que representa uma sequ\u00eancia de zero ou mais caracteres Unicode. Aten\u00e7\u00e3o Strings s\u00e3o imut\u00e1veis. Ap\u00f3s a cria\u00e7\u00e3o de um string, seu conte\u00fado n\u00e3o pode ser alterado. Isso significa que a concatena\u00e7\u00e3o de strings a uma mesma vari\u00e1vel pode ser bastante custosa em termos de consumo de mem\u00f3ria e deve ser levada em considera\u00e7\u00e3o durante a constru\u00e7\u00e3o dos programas. Encapsulamento Este \u00e9 o primeiro pilar ou princ\u00edpio da Programa\u00e7\u00e3o Orientada a Objeto. Agregamos informa\u00e7\u00f5es dentro de um contexto que fa\u00e7am sentido no seu conjunto. Neste contexto, a agrega\u00e7\u00e3o une valores e comportamentos, e para isso precisamos definir os membros de um tipo que est\u00e1 sendo definido: Fields Vari\u00e1veis declaradas no escopo do objeto. Constants Informa\u00e7\u00f5es imut\u00e1veis, definidas em tempo de compila\u00e7\u00e3o. Properties M\u00e9todos de leitura ( get ) e escrita ( set ) dos valores do tipo, propiciando um tratamento e valida\u00e7\u00e3o das informa\u00e7\u00f5es dos fields , al\u00e9m de promover prote\u00e7\u00e3o aos valores armazenados. Methods A\u00e7\u00f5es/fun\u00e7\u00f5es sobre os valores do tipo. Constructors M\u00e9todos especiais, utilizados para criar a inst\u00e2ncia do tipo e inicializar seus valores. Events M\u00e9todos especiais, refer\u00eancias para m\u00e9todos de outras classes, utilizados para notifica\u00e7\u00e3o de ocorr\u00eancias. Finalizers M\u00e9todos especiais, que s\u00e3o chamados quando o objeto est\u00e1 sendo destru\u00eddo e \u00e9 necess\u00e1ria alguma libera\u00e7\u00e3o de recursos de forma manual. Raramente utilizados. Operators M\u00e9todos para sobrecarregar operadores ( operator overloading ), modificando opera\u00e7\u00f5es aritm\u00e9ticas, l\u00f3gicas e comparativas. Tipos Aninhados Tipos que s\u00e3o utilizados apenas dentro do contexto do objeto. Acessibiidade Os membros dos objetos precisam de uma defini\u00e7\u00e3o de acesso, para que se garanta a integridade dos valores. Dessa maneira, temos os seguintes modificadores: public Acess\u00edvel por qualquer c\u00f3digo que consuma o objeto protected Acess\u00edvel apenas pelos objetos cujos tipos herdem do tipo atual internal Acess\u00edvel apenas pelos c\u00f3digos que perten\u00e7am ao mesmo namespace do tipo. private Acess\u00edvel apenas por c\u00f3digo do pr\u00f3prio tipo. Classes Escolhendo entre class e struct Quando usar structs? Considere usar uma struct ao inv\u00e9s de uma classe se as inst\u00e2ncias do tipo forem pequenas e de vida curta, ou forem comumente embutidas em outros objetos Quando n\u00e3o usar structs? Evite definir uma struct caso o tipo n\u00e3o tenha todas essas caracter\u00edsticas: * Representa logicamente um valor simples, similar aos tipos primitivos. * Tem um tamanho de inst\u00e2ncia de at\u00e9 16 bytes. * \u00c9 imut\u00e1vel. * N\u00e3o precisa ser [_unboxed_](https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/boxing-and-unboxing) frequentemente.","title":"Bases 2"},{"location":"01/bases_02/#bases-da-linguagem","text":"","title":"Bases da linguagem"},{"location":"01/bases_02/#tipos-de-referencia-reference-types","text":"Os tipos de refer\u00eancia s\u00e3o ponteiros para os dados, e ao contr\u00e1rio dos value types , durante a atribui\u00e7\u00e3o, passagem por par\u00e2metro ou retorno de fun\u00e7\u00e3o, somente o endere\u00e7o do dado \u00e9 transmitido.","title":"Tipos de Refer\u00eancia (Reference Types)"},{"location":"01/bases_02/#strings","text":"Tipo que representa uma sequ\u00eancia de zero ou mais caracteres Unicode. Aten\u00e7\u00e3o Strings s\u00e3o imut\u00e1veis. Ap\u00f3s a cria\u00e7\u00e3o de um string, seu conte\u00fado n\u00e3o pode ser alterado. Isso significa que a concatena\u00e7\u00e3o de strings a uma mesma vari\u00e1vel pode ser bastante custosa em termos de consumo de mem\u00f3ria e deve ser levada em considera\u00e7\u00e3o durante a constru\u00e7\u00e3o dos programas.","title":"Strings"},{"location":"01/bases_02/#encapsulamento","text":"Este \u00e9 o primeiro pilar ou princ\u00edpio da Programa\u00e7\u00e3o Orientada a Objeto. Agregamos informa\u00e7\u00f5es dentro de um contexto que fa\u00e7am sentido no seu conjunto. Neste contexto, a agrega\u00e7\u00e3o une valores e comportamentos, e para isso precisamos definir os membros de um tipo que est\u00e1 sendo definido: Fields Vari\u00e1veis declaradas no escopo do objeto. Constants Informa\u00e7\u00f5es imut\u00e1veis, definidas em tempo de compila\u00e7\u00e3o. Properties M\u00e9todos de leitura ( get ) e escrita ( set ) dos valores do tipo, propiciando um tratamento e valida\u00e7\u00e3o das informa\u00e7\u00f5es dos fields , al\u00e9m de promover prote\u00e7\u00e3o aos valores armazenados. Methods A\u00e7\u00f5es/fun\u00e7\u00f5es sobre os valores do tipo. Constructors M\u00e9todos especiais, utilizados para criar a inst\u00e2ncia do tipo e inicializar seus valores. Events M\u00e9todos especiais, refer\u00eancias para m\u00e9todos de outras classes, utilizados para notifica\u00e7\u00e3o de ocorr\u00eancias. Finalizers M\u00e9todos especiais, que s\u00e3o chamados quando o objeto est\u00e1 sendo destru\u00eddo e \u00e9 necess\u00e1ria alguma libera\u00e7\u00e3o de recursos de forma manual. Raramente utilizados. Operators M\u00e9todos para sobrecarregar operadores ( operator overloading ), modificando opera\u00e7\u00f5es aritm\u00e9ticas, l\u00f3gicas e comparativas. Tipos Aninhados Tipos que s\u00e3o utilizados apenas dentro do contexto do objeto.","title":"Encapsulamento"},{"location":"01/bases_02/#acessibiidade","text":"Os membros dos objetos precisam de uma defini\u00e7\u00e3o de acesso, para que se garanta a integridade dos valores. Dessa maneira, temos os seguintes modificadores: public Acess\u00edvel por qualquer c\u00f3digo que consuma o objeto protected Acess\u00edvel apenas pelos objetos cujos tipos herdem do tipo atual internal Acess\u00edvel apenas pelos c\u00f3digos que perten\u00e7am ao mesmo namespace do tipo. private Acess\u00edvel apenas por c\u00f3digo do pr\u00f3prio tipo.","title":"Acessibiidade"},{"location":"01/bases_02/#classes","text":"","title":"Classes"},{"location":"01/bases_02/#escolhendo-entre-class-e-struct","text":"Quando usar structs? Considere usar uma struct ao inv\u00e9s de uma classe se as inst\u00e2ncias do tipo forem pequenas e de vida curta, ou forem comumente embutidas em outros objetos Quando n\u00e3o usar structs? Evite definir uma struct caso o tipo n\u00e3o tenha todas essas caracter\u00edsticas: * Representa logicamente um valor simples, similar aos tipos primitivos. * Tem um tamanho de inst\u00e2ncia de at\u00e9 16 bytes. * \u00c9 imut\u00e1vel. * N\u00e3o precisa ser [_unboxed_](https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/boxing-and-unboxing) frequentemente.","title":"Escolhendo entre class e struct"},{"location":"01/dotnet/","text":"DotNet e C-Sharp SDK e Runtime O SDK disponibiliza os recursos necess\u00e1rios ao desenvolvimento: compila\u00e7\u00e3o, testes e outras fun\u00e7\u00f5es. J\u00e1 os runtimes s\u00e3o bibliotecas de execu\u00e7\u00e3o das aplica\u00e7\u00f5es. Via de regra, SDK s\u00e3o utilizados no desenvolvimento, e runtimes s\u00e3o utilizados no deploy . Podemos verificar o tamanho das imagens docker de SDK \u00b4s e runtimes com o comando abaixo: \u276f docker images REPOSITORY TAG IMAGE ID CREATED SIZE mcr.microsoft.com/dotnet/sdk 7.0 3088c542a3e1 2 days ago 761MB mcr.microsoft.com/dotnet/sdk 6.0 28bed156717a 2 days ago 737MB mcr.microsoft.com/dotnet/aspnet 7.0 637559a1ee8b 2 days ago 212MB mcr.microsoft.com/dotnet/aspnet 6.0 ab511e11221a 2 days ago 208MB Como obter as imagens docker docker pull mcr.microsoft.com/dotnet/aspnet:7.0 docker pull mcr.microsoft.com/dotnet/sdk:7.0 docker pull mcr.microsoft.com/dotnet/aspnet:6.0 docker pull mcr.microsoft.com/dotnet/sdk:6.0 A partir da linha de comando, podemos verificar o que foi instalado no passo de setup, para podermos come\u00e7ar a desenvolver nossos projetos em C#. \u276f dotnet --info .NET SDK (reflecting any global.json): Version: 6.0.403 Commit: 2bc18bf292 Runtime Environment: OS Name: ubuntu OS Version: 20.04 OS Platform: Linux RID: ubuntu.20.04-x64 Base Path: /usr/share/dotnet/sdk/6.0.403/ global.json file: Not found Host: Version: 6.0.11 Architecture: x64 Commit: 943474ca16 .NET SDKs installed: 6.0.403 [/usr/share/dotnet/sdk] .NET runtimes installed: Microsoft.AspNetCore.App 6.0.11 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App] Microsoft.NETCore.App 6.0.11 [/usr/share/dotnet/shared/Microsoft.NETCore.App] Download .NET: https://aka.ms/dotnet-download Learn about .NET Runtimes and SDKs: https://aka.ms/dotnet/runtimes-sdk-info No ambiente do exemplo, temos o SDK 6.0.403 e os runtime AspNetCore e NetCore 6.0.11 .","title":"Introdu\u00e7\u00e3o"},{"location":"01/dotnet/#dotnet-e-c-sharp","text":"","title":"DotNet e C-Sharp"},{"location":"01/dotnet/#sdk-e-runtime","text":"O SDK disponibiliza os recursos necess\u00e1rios ao desenvolvimento: compila\u00e7\u00e3o, testes e outras fun\u00e7\u00f5es. J\u00e1 os runtimes s\u00e3o bibliotecas de execu\u00e7\u00e3o das aplica\u00e7\u00f5es. Via de regra, SDK s\u00e3o utilizados no desenvolvimento, e runtimes s\u00e3o utilizados no deploy . Podemos verificar o tamanho das imagens docker de SDK \u00b4s e runtimes com o comando abaixo: \u276f docker images REPOSITORY TAG IMAGE ID CREATED SIZE mcr.microsoft.com/dotnet/sdk 7.0 3088c542a3e1 2 days ago 761MB mcr.microsoft.com/dotnet/sdk 6.0 28bed156717a 2 days ago 737MB mcr.microsoft.com/dotnet/aspnet 7.0 637559a1ee8b 2 days ago 212MB mcr.microsoft.com/dotnet/aspnet 6.0 ab511e11221a 2 days ago 208MB Como obter as imagens docker docker pull mcr.microsoft.com/dotnet/aspnet:7.0 docker pull mcr.microsoft.com/dotnet/sdk:7.0 docker pull mcr.microsoft.com/dotnet/aspnet:6.0 docker pull mcr.microsoft.com/dotnet/sdk:6.0 A partir da linha de comando, podemos verificar o que foi instalado no passo de setup, para podermos come\u00e7ar a desenvolver nossos projetos em C#. \u276f dotnet --info .NET SDK (reflecting any global.json): Version: 6.0.403 Commit: 2bc18bf292 Runtime Environment: OS Name: ubuntu OS Version: 20.04 OS Platform: Linux RID: ubuntu.20.04-x64 Base Path: /usr/share/dotnet/sdk/6.0.403/ global.json file: Not found Host: Version: 6.0.11 Architecture: x64 Commit: 943474ca16 .NET SDKs installed: 6.0.403 [/usr/share/dotnet/sdk] .NET runtimes installed: Microsoft.AspNetCore.App 6.0.11 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App] Microsoft.NETCore.App 6.0.11 [/usr/share/dotnet/shared/Microsoft.NETCore.App] Download .NET: https://aka.ms/dotnet-download Learn about .NET Runtimes and SDKs: https://aka.ms/dotnet/runtimes-sdk-info No ambiente do exemplo, temos o SDK 6.0.403 e os runtime AspNetCore e NetCore 6.0.11 .","title":"SDK e Runtime"},{"location":"01/solution/","text":"Solutions As aplica\u00e7\u00f5es dotnet s\u00e3o organizadas de forma componentizada. Uma solution cont\u00e9m uma cole\u00e7\u00e3o de projetos, junto com as informa\u00e7\u00f5es de depend\u00eancia entre estes. Os projetos, por sua vez, est\u00e3o em subpastas com seus arquivos-fonte. Uma solution pode ter um ou mais projetos, e inclusive um projeto pode ser compartilhado por mais de uma solution, mas isso n\u00e3o \u00e9 comum no nosso contexto. classDiagram Solution <|-- ClassLib Solution <|-- AspNet API Solution <|-- Worker Solution : NossaAplica\u00e7\u00e3o.sln class ClassLib { Biblioteca.csproj } class AspNet API { API.csproj } class Worker{ Worker.csproj } Projects Os projetos tem duas fun\u00e7\u00f5es principais: ser um cont\u00eainer para os arquivos-fontes e compilar estes arquivos em algum tipo de componente, definido pelo tipo do projeto. Os tipos de projeto dispon\u00edveis no nosso SDK podem ser verificados com o comando abaixo: \u276f dotnet new --list These templates matched your input: Template Name Short Name Language Tags -------------------------------------------- -------------- ---------- -------------------------- ASP.NET Core Empty web [C#],F# Web/Empty ASP.NET Core gRPC Service grpc [C#] Web/gRPC ASP.NET Core Web API webapi [C#],F# Web/WebAPI ASP.NET Core Web App webapp,razor [C#] Web/MVC/Razor Pages ASP.NET Core Web App (Model-View-Controller) mvc [C#],F# Web/MVC ASP.NET Core with Angular angular [C#] Web/MVC/SPA ASP.NET Core with React.js react [C#] Web/MVC/SPA Blazor Server App blazorserver [C#] Web/Blazor Blazor WebAssembly App blazorwasm [C#] Web/Blazor/WebAssembly/PWA Class Library classlib [C#],F#,VB Common/Library Console App console [C#],F#,VB Common/Console dotnet gitignore file gitignore Config Dotnet local tool manifest file tool-manifest Config EditorConfig file editorconfig Config global.json file globaljson Config MSTest Test Project mstest [C#],F#,VB Test/MSTest MVC ViewImports viewimports [C#] Web/ASP.NET MVC ViewStart viewstart [C#] Web/ASP.NET NuGet Config nugetconfig Config NUnit 3 Test Item nunit-test [C#],F#,VB Test/NUnit NUnit 3 Test Project nunit [C#],F#,VB Test/NUnit Protocol Buffer File proto Web/gRPC Razor Class Library razorclasslib [C#] Web/Razor/Library Razor Component razorcomponent [C#] Web/ASP.NET Razor Page page [C#] Web/ASP.NET Solution File sln,solution Solution Web Config webconfig Config Worker Service worker [C#],F# Common/Worker/Web xUnit Test Project xunit [C#],F#,VB Test/xUnit Criando nossa primeira solution Observando os templates dispon\u00edveis na lista anterior, Solution File usa as chaves sln e solution . Dessa maneira, vamos usar o terminal para criar nossa solution. \u276f dotnet new sln -n NossaPrimeiraSolution The template \"Solution File\" was created successfully. \u276f dotnet new console --name \"ConsoleApp\" The template \"Console App\" was created successfully. Processing post-creation actions... Running 'dotnet restore' on /mnt/c/dev/tmp/dotnet/ConsoleApp/ConsoleApp.csproj... Determining projects to restore... Restored /mnt/c/dev/tmp/dotnet/ConsoleApp/ConsoleApp.csproj (in 119 ms). Restore succeeded. \u276f tree . \u251c\u2500\u2500 ConsoleApp \u2502 \u251c\u2500\u2500 ConsoleApp.csproj \u2502 \u2514\u2500\u2500 Program.cs \u2514\u2500\u2500 NossaPrimeiraSolution.sln 1 directory, 3 files Utilizando o Visual Studio, basta criar um projeto que a solution vai ser criada ao mesmo tempo. Testando o nosso primeiro app de console: console/NossaAplicacaoConsole/NossaAplicacaoConsole via .NET v6.0.403 \ud83c\udfaf net6.0 \u276f dotnet run . Ol\u00e1, mundo AmbevTech!","title":"Solutions"},{"location":"01/solution/#solutions","text":"As aplica\u00e7\u00f5es dotnet s\u00e3o organizadas de forma componentizada. Uma solution cont\u00e9m uma cole\u00e7\u00e3o de projetos, junto com as informa\u00e7\u00f5es de depend\u00eancia entre estes. Os projetos, por sua vez, est\u00e3o em subpastas com seus arquivos-fonte. Uma solution pode ter um ou mais projetos, e inclusive um projeto pode ser compartilhado por mais de uma solution, mas isso n\u00e3o \u00e9 comum no nosso contexto. classDiagram Solution <|-- ClassLib Solution <|-- AspNet API Solution <|-- Worker Solution : NossaAplica\u00e7\u00e3o.sln class ClassLib { Biblioteca.csproj } class AspNet API { API.csproj } class Worker{ Worker.csproj }","title":"Solutions"},{"location":"01/solution/#projects","text":"Os projetos tem duas fun\u00e7\u00f5es principais: ser um cont\u00eainer para os arquivos-fontes e compilar estes arquivos em algum tipo de componente, definido pelo tipo do projeto. Os tipos de projeto dispon\u00edveis no nosso SDK podem ser verificados com o comando abaixo: \u276f dotnet new --list These templates matched your input: Template Name Short Name Language Tags -------------------------------------------- -------------- ---------- -------------------------- ASP.NET Core Empty web [C#],F# Web/Empty ASP.NET Core gRPC Service grpc [C#] Web/gRPC ASP.NET Core Web API webapi [C#],F# Web/WebAPI ASP.NET Core Web App webapp,razor [C#] Web/MVC/Razor Pages ASP.NET Core Web App (Model-View-Controller) mvc [C#],F# Web/MVC ASP.NET Core with Angular angular [C#] Web/MVC/SPA ASP.NET Core with React.js react [C#] Web/MVC/SPA Blazor Server App blazorserver [C#] Web/Blazor Blazor WebAssembly App blazorwasm [C#] Web/Blazor/WebAssembly/PWA Class Library classlib [C#],F#,VB Common/Library Console App console [C#],F#,VB Common/Console dotnet gitignore file gitignore Config Dotnet local tool manifest file tool-manifest Config EditorConfig file editorconfig Config global.json file globaljson Config MSTest Test Project mstest [C#],F#,VB Test/MSTest MVC ViewImports viewimports [C#] Web/ASP.NET MVC ViewStart viewstart [C#] Web/ASP.NET NuGet Config nugetconfig Config NUnit 3 Test Item nunit-test [C#],F#,VB Test/NUnit NUnit 3 Test Project nunit [C#],F#,VB Test/NUnit Protocol Buffer File proto Web/gRPC Razor Class Library razorclasslib [C#] Web/Razor/Library Razor Component razorcomponent [C#] Web/ASP.NET Razor Page page [C#] Web/ASP.NET Solution File sln,solution Solution Web Config webconfig Config Worker Service worker [C#],F# Common/Worker/Web xUnit Test Project xunit [C#],F#,VB Test/xUnit","title":"Projects"},{"location":"01/solution/#criando-nossa-primeira-solution","text":"Observando os templates dispon\u00edveis na lista anterior, Solution File usa as chaves sln e solution . Dessa maneira, vamos usar o terminal para criar nossa solution. \u276f dotnet new sln -n NossaPrimeiraSolution The template \"Solution File\" was created successfully. \u276f dotnet new console --name \"ConsoleApp\" The template \"Console App\" was created successfully. Processing post-creation actions... Running 'dotnet restore' on /mnt/c/dev/tmp/dotnet/ConsoleApp/ConsoleApp.csproj... Determining projects to restore... Restored /mnt/c/dev/tmp/dotnet/ConsoleApp/ConsoleApp.csproj (in 119 ms). Restore succeeded. \u276f tree . \u251c\u2500\u2500 ConsoleApp \u2502 \u251c\u2500\u2500 ConsoleApp.csproj \u2502 \u2514\u2500\u2500 Program.cs \u2514\u2500\u2500 NossaPrimeiraSolution.sln 1 directory, 3 files Utilizando o Visual Studio, basta criar um projeto que a solution vai ser criada ao mesmo tempo. Testando o nosso primeiro app de console: console/NossaAplicacaoConsole/NossaAplicacaoConsole via .NET v6.0.403 \ud83c\udfaf net6.0 \u276f dotnet run . Ol\u00e1, mundo AmbevTech!","title":"Criando nossa primeira solution"},{"location":"02/bases_03/","text":"Bases da linguagem M\u00e9todos De forma geral, m\u00e9todos s\u00e3o a\u00e7\u00f5es, sequ\u00eancias de comandos para o processamento de informa\u00e7\u00f5es. Os m\u00e9todos podem receber argumentos na forma de vari\u00e1veis, e retornar ou n\u00e3o informa\u00e7\u00e3o. No contexto deste treinamento, vamos classificar os m\u00e9todos em dois tipos: Actions M\u00e9todo que n\u00e3o retorna valor void ActionQueNaoRetornaValor(string nomeDaPessoa) { Console.WriteLine(nomeDaPessoa, \" passou por aqui\"); } void \u00e9 uma palavra reservada que significa vazio, e nesse contexto indica que o m\u00e9todo n\u00e3o tem nenhum retorno. Aten\u00e7\u00e3o N\u00e3o confundir void com null , que representa um valor nulo, um ponteiro que n\u00e3o aponta para nenhuma regi\u00e3o de mem\u00f3ria. Entre os par\u00eanteses, indicamos os argumentos que o m\u00e9todo receber\u00e1. No exemplo, primeiro indicamos o tipo (string) e em seguida, o nome do argumento (nomeDaPessoa). Functions M\u00e9todo que retorna valor int FunctionQueRetornaValor(int n1, int n2) { return n1 + n2; } Delegates O conceito de delegates vem da ideia de usar m\u00e9todos com a mesma assinatura. Para definir a assinatura de um delegate, usamos Action e Func . As actions, que s\u00e3o m\u00e9todos sem retornos podem ser assinadas como demonstrado no exemplo abaixo: // Definimos a vari\u00e1vel actionString, que pode receber um m\u00e9todo Action<string> actionString; // Atribuimos nossa action \u00e0 vari\u00e1vel actionString = ActionQueNaoRetornaValor; actionString(\"Guionardo\") // Definimos nova action void SegundaActionSemRetorno(string saudacao) { Console.WriteLine(\"Dito: \", saudacao); } // Atribuimos nossa nova action \u00e0 mesma vari\u00e1vel actionString = SegundaActionSemRetorno; actionString(\"BOM DIA\") Guionardo passou por aqui Dito: BOM DIA Quando precisamos definir assinaturas de functions, usamos o seguinte: /// /// Fun\u00e7\u00e3o simples com retorno /// float Soma(float valor1, float valor2) { return valor1 + valor2; } /// /// Fun\u00e7\u00e3o com declara\u00e7\u00e3o de corpo reduzido /// float Subtracao(float valor1, float valor2) => valor1 - valor2; // Definimos uma vari\u00e1vel que pode receber uma fun\u00e7\u00e3o com dois argumentos float e um retorno float. Func<float,float,float> CalculateFunction; CalculateFuncion = Soma; var resultado = CalculateFunction(4.3, 3.2); // resultado = 7.5 Escopo No C#, o escopo de execu\u00e7\u00e3o est\u00e3o delimitados pelos blocos de comandos { } . Ent\u00e3o, vari\u00e1veis que s\u00e3o criadas dentro de um escopo s\u00e3o destru\u00eddas ap\u00f3s o fechamento deste. Aten\u00e7\u00e3o para vari\u00e1veis que criam inst\u00e2ncias de objetos e s\u00e3o retornadas para uso em outros escopos. Nesse caso, entra em a\u00e7\u00e3o a contagem de refer\u00eancia desses dados em mem\u00f3ria e o garbage collector faz a limpeza periodicamente dos objetos criados e sem refer\u00eancia em se\u00e7\u00f5es de c\u00f3digo ativo. Closures Closures s\u00e3o fun\u00e7\u00f5es que retornam outras fun\u00e7\u00f5es, com comportamento modificado. Na cria\u00e7\u00e3o das fun\u00e7\u00f5es, podem ser injetadas vari\u00e1veis com valores espec\u00edficos que ser\u00e3o utilizados durante a execu\u00e7\u00e3o. Console.WriteLine(\"Closure!\"); Func<int, int> CriarMultiplicador(int multiplicador) { int funcMultiplicador(int valor) { return valor * multiplicador; } return funcMultiplicador; } var dobro = CriarMultiplicador(2); var triplo = CriarMultiplicador(3); Console.WriteLine(\"Dobro de 2 = \" + dobro(2)); Console.WriteLine(\"Triplo de 2 = \" + triplo(2)); Dobro de 2 = 4 Triplo de 2 = 6","title":"Bases 3"},{"location":"02/bases_03/#bases-da-linguagem","text":"","title":"Bases da linguagem"},{"location":"02/bases_03/#metodos","text":"De forma geral, m\u00e9todos s\u00e3o a\u00e7\u00f5es, sequ\u00eancias de comandos para o processamento de informa\u00e7\u00f5es. Os m\u00e9todos podem receber argumentos na forma de vari\u00e1veis, e retornar ou n\u00e3o informa\u00e7\u00e3o. No contexto deste treinamento, vamos classificar os m\u00e9todos em dois tipos: Actions M\u00e9todo que n\u00e3o retorna valor void ActionQueNaoRetornaValor(string nomeDaPessoa) { Console.WriteLine(nomeDaPessoa, \" passou por aqui\"); } void \u00e9 uma palavra reservada que significa vazio, e nesse contexto indica que o m\u00e9todo n\u00e3o tem nenhum retorno. Aten\u00e7\u00e3o N\u00e3o confundir void com null , que representa um valor nulo, um ponteiro que n\u00e3o aponta para nenhuma regi\u00e3o de mem\u00f3ria. Entre os par\u00eanteses, indicamos os argumentos que o m\u00e9todo receber\u00e1. No exemplo, primeiro indicamos o tipo (string) e em seguida, o nome do argumento (nomeDaPessoa). Functions M\u00e9todo que retorna valor int FunctionQueRetornaValor(int n1, int n2) { return n1 + n2; }","title":"M\u00e9todos"},{"location":"02/bases_03/#delegates","text":"O conceito de delegates vem da ideia de usar m\u00e9todos com a mesma assinatura. Para definir a assinatura de um delegate, usamos Action e Func . As actions, que s\u00e3o m\u00e9todos sem retornos podem ser assinadas como demonstrado no exemplo abaixo: // Definimos a vari\u00e1vel actionString, que pode receber um m\u00e9todo Action<string> actionString; // Atribuimos nossa action \u00e0 vari\u00e1vel actionString = ActionQueNaoRetornaValor; actionString(\"Guionardo\") // Definimos nova action void SegundaActionSemRetorno(string saudacao) { Console.WriteLine(\"Dito: \", saudacao); } // Atribuimos nossa nova action \u00e0 mesma vari\u00e1vel actionString = SegundaActionSemRetorno; actionString(\"BOM DIA\") Guionardo passou por aqui Dito: BOM DIA Quando precisamos definir assinaturas de functions, usamos o seguinte: /// /// Fun\u00e7\u00e3o simples com retorno /// float Soma(float valor1, float valor2) { return valor1 + valor2; } /// /// Fun\u00e7\u00e3o com declara\u00e7\u00e3o de corpo reduzido /// float Subtracao(float valor1, float valor2) => valor1 - valor2; // Definimos uma vari\u00e1vel que pode receber uma fun\u00e7\u00e3o com dois argumentos float e um retorno float. Func<float,float,float> CalculateFunction; CalculateFuncion = Soma; var resultado = CalculateFunction(4.3, 3.2); // resultado = 7.5","title":"Delegates"},{"location":"02/bases_03/#escopo","text":"No C#, o escopo de execu\u00e7\u00e3o est\u00e3o delimitados pelos blocos de comandos { } . Ent\u00e3o, vari\u00e1veis que s\u00e3o criadas dentro de um escopo s\u00e3o destru\u00eddas ap\u00f3s o fechamento deste. Aten\u00e7\u00e3o para vari\u00e1veis que criam inst\u00e2ncias de objetos e s\u00e3o retornadas para uso em outros escopos. Nesse caso, entra em a\u00e7\u00e3o a contagem de refer\u00eancia desses dados em mem\u00f3ria e o garbage collector faz a limpeza periodicamente dos objetos criados e sem refer\u00eancia em se\u00e7\u00f5es de c\u00f3digo ativo.","title":"Escopo"},{"location":"02/bases_03/#closures","text":"Closures s\u00e3o fun\u00e7\u00f5es que retornam outras fun\u00e7\u00f5es, com comportamento modificado. Na cria\u00e7\u00e3o das fun\u00e7\u00f5es, podem ser injetadas vari\u00e1veis com valores espec\u00edficos que ser\u00e3o utilizados durante a execu\u00e7\u00e3o. Console.WriteLine(\"Closure!\"); Func<int, int> CriarMultiplicador(int multiplicador) { int funcMultiplicador(int valor) { return valor * multiplicador; } return funcMultiplicador; } var dobro = CriarMultiplicador(2); var triplo = CriarMultiplicador(3); Console.WriteLine(\"Dobro de 2 = \" + dobro(2)); Console.WriteLine(\"Triplo de 2 = \" + triplo(2)); Dobro de 2 = 4 Triplo de 2 = 6","title":"Closures"},{"location":"02/bases_04/","text":"Bases da linguagem Heran\u00e7a Heran\u00e7a \u00e9 um dos pilares da POO (Programa\u00e7\u00e3o Orientada a Objeto). Na defini\u00e7\u00e3o de classes, podemos reutilizar propriedades e m\u00e9todos gen\u00e9ricos e especializar comportamentos de acordo com as necessidades. Ainda com rela\u00e7\u00e3o \u00e0 orienta\u00e7\u00e3o a objeto, \u00e9 sempre importante lembrar do acr\u00f4nimo SOLID, nesse caso o S que significa Single Responsability Principle. Este princ\u00edpio diz que uma classe deve fazer uma coisa s\u00f3, e fazer bem. Em outras palavras, uma classe deve ter apenas uma raz\u00e3o para mudar. Classes gen\u00e9ricas que fazem de tudo, est\u00e3o violando este princ\u00edpio e produzindo c\u00f3digo grande, mais dif\u00edcil de manter e de testar. Um exemplo pr\u00e1tico \u00e9 uma opera\u00e7\u00e3o de cadastro de usu\u00e1rio, onde ter\u00edamos o seguinte fluxo: flowchart TD A[In\u00edcio] --> B[Usu\u00e1rio informa seus dados] B --> C[Valida\u00e7\u00e3o] C --> D{Dados\\nv\u00e1lidos?} D -->|Sim| E[Persist\u00eancia] D -->|N\u00e3o| Z[Erro] E --> F{Dados gravados\\nem disco?} F -->|Sim| G[Notifica\u00e7\u00e3o] F -->|N\u00e3o| Z G --> H{Enviou email\\nao administrador?} H -->|Sim| Y[SUCESSO] H -->|N\u00e3o| Z Uma classe gen\u00e9rica poderia ser assim public class UserAccounterBadApproach { private string _name; private string _email; public UserAccounterBadApproach(string name, string email) { _name = name; _email = email; } public void Validate() { if (string.IsNullOrEmpty(_name)) throw new ArgumentNullException(\"name\"); if (string.IsNullOrEmpty(_email)) throw new ArgumentNullException(\"email\"); } public void Persist() { // CODE FOR SAVING THE USER DATA INTO FILE File.WriteAllText(\"user.txt\", $\"{_name}_{_email}\"); // Will throw exception if cannot write } public void NotifyAdmin() { // CODE FOR SENDING EMAIL TO ADMIN Console.WriteLine($\"Hey, admin. New user is comming {_name}\"); } public void ReceiveUser() { Validate(); Persist(); NotifyAdmin(); } } Uma classe melhor definida teria suas fun\u00e7\u00f5es segregadas em classes especialistas, com o uso de interfaces evitando o acoplamento direto: public class UsserAccounterBestApproach { private User _user; private IUserValidator _validator; private IUserRepository _repository; private INotifier _notifier; public UsserAccounterBestApproach(User user, IUserValidator userValidator, IUserRepository userRepository, INotifier notifier) { _user = user; _validator = userValidator; _repository = userRepository; _notifier = notifier; } public void ReceiveUser() { _validator.Validate(_user); _repository.Save(_user); _notifier.Notify($\"Hey, admin. New user is comming {_user}\"); } }","title":"Bases 4"},{"location":"02/bases_04/#bases-da-linguagem","text":"","title":"Bases da linguagem"},{"location":"02/bases_04/#heranca","text":"Heran\u00e7a \u00e9 um dos pilares da POO (Programa\u00e7\u00e3o Orientada a Objeto). Na defini\u00e7\u00e3o de classes, podemos reutilizar propriedades e m\u00e9todos gen\u00e9ricos e especializar comportamentos de acordo com as necessidades. Ainda com rela\u00e7\u00e3o \u00e0 orienta\u00e7\u00e3o a objeto, \u00e9 sempre importante lembrar do acr\u00f4nimo SOLID, nesse caso o S que significa Single Responsability Principle. Este princ\u00edpio diz que uma classe deve fazer uma coisa s\u00f3, e fazer bem. Em outras palavras, uma classe deve ter apenas uma raz\u00e3o para mudar. Classes gen\u00e9ricas que fazem de tudo, est\u00e3o violando este princ\u00edpio e produzindo c\u00f3digo grande, mais dif\u00edcil de manter e de testar. Um exemplo pr\u00e1tico \u00e9 uma opera\u00e7\u00e3o de cadastro de usu\u00e1rio, onde ter\u00edamos o seguinte fluxo: flowchart TD A[In\u00edcio] --> B[Usu\u00e1rio informa seus dados] B --> C[Valida\u00e7\u00e3o] C --> D{Dados\\nv\u00e1lidos?} D -->|Sim| E[Persist\u00eancia] D -->|N\u00e3o| Z[Erro] E --> F{Dados gravados\\nem disco?} F -->|Sim| G[Notifica\u00e7\u00e3o] F -->|N\u00e3o| Z G --> H{Enviou email\\nao administrador?} H -->|Sim| Y[SUCESSO] H -->|N\u00e3o| Z Uma classe gen\u00e9rica poderia ser assim public class UserAccounterBadApproach { private string _name; private string _email; public UserAccounterBadApproach(string name, string email) { _name = name; _email = email; } public void Validate() { if (string.IsNullOrEmpty(_name)) throw new ArgumentNullException(\"name\"); if (string.IsNullOrEmpty(_email)) throw new ArgumentNullException(\"email\"); } public void Persist() { // CODE FOR SAVING THE USER DATA INTO FILE File.WriteAllText(\"user.txt\", $\"{_name}_{_email}\"); // Will throw exception if cannot write } public void NotifyAdmin() { // CODE FOR SENDING EMAIL TO ADMIN Console.WriteLine($\"Hey, admin. New user is comming {_name}\"); } public void ReceiveUser() { Validate(); Persist(); NotifyAdmin(); } } Uma classe melhor definida teria suas fun\u00e7\u00f5es segregadas em classes especialistas, com o uso de interfaces evitando o acoplamento direto: public class UsserAccounterBestApproach { private User _user; private IUserValidator _validator; private IUserRepository _repository; private INotifier _notifier; public UsserAccounterBestApproach(User user, IUserValidator userValidator, IUserRepository userRepository, INotifier notifier) { _user = user; _validator = userValidator; _repository = userRepository; _notifier = notifier; } public void ReceiveUser() { _validator.Validate(_user); _repository.Save(_user); _notifier.Notify($\"Hey, admin. New user is comming {_user}\"); } }","title":"Heran\u00e7a"},{"location":"02/bases_05/","text":"Bases da linguagem Namespaces Generics Interfaces Records","title":"Bases da linguagem"},{"location":"02/bases_05/#bases-da-linguagem","text":"","title":"Bases da linguagem"},{"location":"02/bases_05/#namespaces","text":"","title":"Namespaces"},{"location":"02/bases_05/#generics","text":"","title":"Generics"},{"location":"02/bases_05/#interfaces","text":"","title":"Interfaces"},{"location":"02/bases_05/#records","text":"","title":"Records"},{"location":"03/03_01_di/","text":"Inje\u00e7\u00e3o de Depend\u00eancia Princ\u00edpios S.O.L.I.D Dentro dos princ\u00edpios S.O.L.I.D. temos os seguintes itens: S ingle Responsability Principle (Princ\u00edpio da Responsabilidade \u00danica) O pen/Closed Principle (Princ\u00edpio do Aberto/Fechado) L iskov Substitution Principle (Princ\u00edpio da Substitui\u00e7\u00e3o de Liskov) I nterface Segregation Principle (Princ\u00edpio da Segrega\u00e7\u00e3o de Interfaces) D ependency Inversion Principle (Princ\u00edpio da Invers\u00e3o de Depend\u00eancia) Single Responsability Principle A class should have one, and only one, reason to change. Robert C. Martin Esse primeiro princ\u00edpio diz que \u201cuma classe deve ter apenas um motivo para mudar\u201d, ou seja, deve ter uma \u00fanica responsabilidade. Basicamente, esse princ\u00edpio trata especificamente a coes\u00e3o. A coes\u00e3o \u00e9 definida como a afinidade funcional dos elementos de um m\u00f3dulo. Se refere ao relacionamento que os membros desse m\u00f3dulo possuem, se possuem uma rela\u00e7\u00e3o mais direta e importante. Dessa forma, quanto mais bem definido o que sua classe faz, mais coesa ela \u00e9. Open/Closed Principle You should be able to extend a classes behavior, without modifying it. Robert C. Martin No princ\u00edpio do Open-Closed Principle diz que \u201cas entidades de software (classes, m\u00f3dulos, fun\u00e7\u00f5es etc.) devem ser abertas para amplia\u00e7\u00e3o, mas fechadas para modifica\u00e7\u00e3o\u201d. De forma mais detalhada, diz que podemos estender o comportamento de uma classe, quando for necess\u00e1rio, por meio de heran\u00e7a, interface e composi\u00e7\u00e3o, mas n\u00e3o podemos permitir a abertura dessa classe para fazer pequenas modifica\u00e7\u00f5es. Liskov Substituion Principle Derived classes must be substitutable for their base classes. Robert C. Martin Se S \u00e9 um subtipo de T, ent\u00e3o os objetos do tipo T, em um programa, podem ser substitu\u00eddos pelos objetos de tipo S sem que seja necess\u00e1rio alterar as propriedades deste programa. Interface Segregation Principle Make fine grained interfaces that are client specific. Robert C. Martin No princ\u00edpio da Segrega\u00e7\u00e3o de Interfaces (ISP) diz que \u201cmuitas interfaces espec\u00edficas s\u00e3o melhores do que uma interface geral\u201d que se trata da coes\u00e3o em interfaces, da constru\u00e7\u00e3o de m\u00f3dulos enxutos, ou seja, com poucos comportamentos. Interfaces que possuem muitos comportamentos s\u00e3o dif\u00edceis de manter e evoluir, e devem ser evitadas. Dependency Inversion Principle Depend on abstractions, not on concretions. Robert C. Martin Devemos \u201cdepender de abstra\u00e7\u00f5es e n\u00e3o de classes concretas\u201d: \u201cM\u00f3dulos de alto n\u00edvel n\u00e3o devem depender de m\u00f3dulos de baixo n\u00edvel.\u201d \u201cAs abstra\u00e7\u00f5es n\u00e3o devem depender de detalhes. Os detalhes devem depender das abstra\u00e7\u00f5es.\u201d Acoplamento e Coes\u00e3o Acoplamento Acoplamento \u00e9 o grau de interdepend\u00eancia entre m\u00f3dulos de software. Um auto grau de acoplamento implica que mudan\u00e7as em um m\u00f3dulo podem refletir em outro m\u00f3dulo acoplado. Quanto maior o acoplamento, menor a interdepend\u00eancia, a coordena\u00e7\u00e3o e mais turbulento \u00e9 o fluxo das informa\u00e7\u00f5es. Baixo acoplamento, geralmente indica um sistema bem estruturado e mais f\u00e1cil de desenvolver, evoluir e dar manuten\u00e7\u00e3o. Coes\u00e3o \u00c9 um princ\u00edpio ligado ao S do SOLID, e refor\u00e7ando a id\u00e9ia, indica que uma classe tem apenas uma responsabilidade e deve faz\u00ea-la bem. N\u00e3o deve assumir responsabilidades que n\u00e3o s\u00e3o suas. Quanto mais coesa uma classe \u00e9, mais independente ela \u00e9. Heran\u00e7a vs Composi\u00e7\u00e3o Heran\u00e7a Quando se estuda OOP , a heran\u00e7a faz parte do roteiro, porque \u00e9 um dos pilares principais. Entretanto, a heran\u00e7a tamb\u00e9m traz um efeito colateral, aumentando o acoplamento e dificultando testes, e aumentando complexidades. Normalmente, \u00e9 prefer\u00edvel trabalhar com composi\u00e7\u00e3o, onde uma classe que tem a\u00e7\u00f5es que podem ser especializadas, o fa\u00e7am usando outras classes independentes que s\u00e3o injetadas automaticamente. Assim, mantemos as classes o mais enxutas poss\u00edvel.","title":"Inter 1"},{"location":"03/03_01_di/#injecao-de-dependencia","text":"","title":"Inje\u00e7\u00e3o de Depend\u00eancia"},{"location":"03/03_01_di/#principios-solid","text":"Dentro dos princ\u00edpios S.O.L.I.D. temos os seguintes itens: S ingle Responsability Principle (Princ\u00edpio da Responsabilidade \u00danica) O pen/Closed Principle (Princ\u00edpio do Aberto/Fechado) L iskov Substitution Principle (Princ\u00edpio da Substitui\u00e7\u00e3o de Liskov) I nterface Segregation Principle (Princ\u00edpio da Segrega\u00e7\u00e3o de Interfaces) D ependency Inversion Principle (Princ\u00edpio da Invers\u00e3o de Depend\u00eancia)","title":"Princ\u00edpios S.O.L.I.D"},{"location":"03/03_01_di/#single-responsability-principle","text":"A class should have one, and only one, reason to change. Robert C. Martin Esse primeiro princ\u00edpio diz que \u201cuma classe deve ter apenas um motivo para mudar\u201d, ou seja, deve ter uma \u00fanica responsabilidade. Basicamente, esse princ\u00edpio trata especificamente a coes\u00e3o. A coes\u00e3o \u00e9 definida como a afinidade funcional dos elementos de um m\u00f3dulo. Se refere ao relacionamento que os membros desse m\u00f3dulo possuem, se possuem uma rela\u00e7\u00e3o mais direta e importante. Dessa forma, quanto mais bem definido o que sua classe faz, mais coesa ela \u00e9.","title":"Single Responsability Principle"},{"location":"03/03_01_di/#openclosed-principle","text":"You should be able to extend a classes behavior, without modifying it. Robert C. Martin No princ\u00edpio do Open-Closed Principle diz que \u201cas entidades de software (classes, m\u00f3dulos, fun\u00e7\u00f5es etc.) devem ser abertas para amplia\u00e7\u00e3o, mas fechadas para modifica\u00e7\u00e3o\u201d. De forma mais detalhada, diz que podemos estender o comportamento de uma classe, quando for necess\u00e1rio, por meio de heran\u00e7a, interface e composi\u00e7\u00e3o, mas n\u00e3o podemos permitir a abertura dessa classe para fazer pequenas modifica\u00e7\u00f5es.","title":"Open/Closed Principle"},{"location":"03/03_01_di/#liskov-substituion-principle","text":"Derived classes must be substitutable for their base classes. Robert C. Martin Se S \u00e9 um subtipo de T, ent\u00e3o os objetos do tipo T, em um programa, podem ser substitu\u00eddos pelos objetos de tipo S sem que seja necess\u00e1rio alterar as propriedades deste programa.","title":"Liskov Substituion Principle"},{"location":"03/03_01_di/#interface-segregation-principle","text":"Make fine grained interfaces that are client specific. Robert C. Martin No princ\u00edpio da Segrega\u00e7\u00e3o de Interfaces (ISP) diz que \u201cmuitas interfaces espec\u00edficas s\u00e3o melhores do que uma interface geral\u201d que se trata da coes\u00e3o em interfaces, da constru\u00e7\u00e3o de m\u00f3dulos enxutos, ou seja, com poucos comportamentos. Interfaces que possuem muitos comportamentos s\u00e3o dif\u00edceis de manter e evoluir, e devem ser evitadas.","title":"Interface Segregation Principle"},{"location":"03/03_01_di/#dependency-inversion-principle","text":"Depend on abstractions, not on concretions. Robert C. Martin Devemos \u201cdepender de abstra\u00e7\u00f5es e n\u00e3o de classes concretas\u201d: \u201cM\u00f3dulos de alto n\u00edvel n\u00e3o devem depender de m\u00f3dulos de baixo n\u00edvel.\u201d \u201cAs abstra\u00e7\u00f5es n\u00e3o devem depender de detalhes. Os detalhes devem depender das abstra\u00e7\u00f5es.\u201d","title":"Dependency Inversion Principle"},{"location":"03/03_01_di/#acoplamento-e-coesao","text":"","title":"Acoplamento e Coes\u00e3o"},{"location":"03/03_01_di/#acoplamento","text":"Acoplamento \u00e9 o grau de interdepend\u00eancia entre m\u00f3dulos de software. Um auto grau de acoplamento implica que mudan\u00e7as em um m\u00f3dulo podem refletir em outro m\u00f3dulo acoplado. Quanto maior o acoplamento, menor a interdepend\u00eancia, a coordena\u00e7\u00e3o e mais turbulento \u00e9 o fluxo das informa\u00e7\u00f5es. Baixo acoplamento, geralmente indica um sistema bem estruturado e mais f\u00e1cil de desenvolver, evoluir e dar manuten\u00e7\u00e3o.","title":"Acoplamento"},{"location":"03/03_01_di/#coesao","text":"\u00c9 um princ\u00edpio ligado ao S do SOLID, e refor\u00e7ando a id\u00e9ia, indica que uma classe tem apenas uma responsabilidade e deve faz\u00ea-la bem. N\u00e3o deve assumir responsabilidades que n\u00e3o s\u00e3o suas. Quanto mais coesa uma classe \u00e9, mais independente ela \u00e9.","title":"Coes\u00e3o"},{"location":"03/03_01_di/#heranca-vs-composicao","text":"","title":"Heran\u00e7a vs Composi\u00e7\u00e3o"},{"location":"03/03_01_di/#heranca","text":"Quando se estuda OOP , a heran\u00e7a faz parte do roteiro, porque \u00e9 um dos pilares principais. Entretanto, a heran\u00e7a tamb\u00e9m traz um efeito colateral, aumentando o acoplamento e dificultando testes, e aumentando complexidades. Normalmente, \u00e9 prefer\u00edvel trabalhar com composi\u00e7\u00e3o, onde uma classe que tem a\u00e7\u00f5es que podem ser especializadas, o fa\u00e7am usando outras classes independentes que s\u00e3o injetadas automaticamente. Assim, mantemos as classes o mais enxutas poss\u00edvel.","title":"Heran\u00e7a"},{"location":"03/03_02_stack_vs_heap/","text":"Porque a stack \u00e9 mais r\u00e1pida que o heap ? Fato: Ambos, stack e heap, est\u00e3o na RAM. Ent\u00e3o, porque a stack \u00e9 mais r\u00e1pida do que o heap? Resposta abstrata: Est\u00e1 relacionado a COMO elas s\u00e3o alocadas na mem\u00f3ria. Stack Stack \u00e9 um espa\u00e7o cont\u00edguo na mem\u00f3ria, uma \u00e1rea sequencial de 1MB (em sistemas de 32 bits) ou 4MB (em sistemas de 64 bits), e mesmo em linguagens sem gerenciamento de mem\u00f3ria, \u00e9 controlada pela pr\u00f3pria linguagem, sem demandar interven\u00e7\u00e3o manual para aloca\u00e7\u00e3o e desaloca\u00e7\u00e3o. Ent\u00e3o, o stack tem tamanho limitado e exatamente por esta raz\u00e3o, voc\u00ea pode ter encontrado alguma exce\u00e7\u00e3o do tipo StackOverflowException . Heap Diferentemente do stack, o heap n\u00e3o \u00e9 um espa\u00e7o cont\u00edguo. \u00c9 uma cole\u00e7\u00e3o de segmentos de mem\u00f3ria que podem estar ou n\u00e3o pr\u00f3ximos uns dos outros. Tamb\u00e9m n\u00e3o tem tamanho fixo, expandindo e encolhendo de acordo com a demanda. Ent\u00e3o, porque n\u00e3o usamos apenas o heap e nos livramos da limita\u00e7\u00e3o de espa\u00e7o do stack? Porque, exatamente por ter tamanho vari\u00e1vel e ser distribu\u00edda por v\u00e1rios blocos, a leitura e escrita no heap \u00e9 muito mais lenta, mas ainda, vital para nosso c\u00f3digo funcionar. No stack, sendo uma \u00e1rea cont\u00edgua, sua aplica\u00e7\u00e3o \"sabe\" onde vai encontrar os valores em mem\u00f3ria, mas no caso do Heap, ter\u00e1 que fazer a busca pelos dados na mem\u00f3ria atrav\u00e9s de endere\u00e7amento. Garbage Collector O GC vai limpar ambos o Stack e o Heap? N\u00e3o. O GC somente limpa o Heap e n\u00e3o afeta o stack. O trabalho principal do GC \u00e9 automaticamente rastrear e gerenciar a mem\u00f3ria que foi alocada no heap pelo programa. O stack, por outro lado, \u00e9 gerenciado automaticamente pelo sistema. O GC \u00e9 uma thread especial criada pelo .NET Runtime para monitorar aloca\u00e7\u00f5es no heap. Cada refer\u00eancia numa stack a uma aloca\u00e7\u00e3o no heap \u00e9 contada. Quando uma aloca\u00e7\u00e3o no stack \u00e9 encerrada, decrementa a refer\u00eancia daquele objeto no heap. Quando um objeto no heap tem o contador de refer\u00eancias zerado, ele se torna um candidato para o GC fazer a limpeza. Diferen\u00e7as Categoria Categoria Stack Heap O que \u00e9? \u00c9 um array de mem\u00f3ria. \u00c9 uma estrutura LIFO. Dados somente podem ser adicionados e deletados do topo. \u00c9 uma \u00e1rea de mem\u00f3ria onde peda\u00e7os s\u00e3o alocados para armazenar certos tipos de objetos de dados. Dados podem ser adicionados e removidos em qualquer hora. Como \u00e9 gerenciado? Cen\u00e1rio pr\u00e1tico Valor da vari\u00e1vel armazenado na stack Valor da vari\u00e1vel armazenada no heap e ponteiro para informa\u00e7\u00e3o armazenada na stack O que vai l\u00e1 dentro? Descendentes de System.ValueType: bool, byte, char, decimal, double, enum, float, int, long, sbyte, short, struct, uint, ulong, ushort Tipos por refer\u00eancia, descendentes de System.Object: class, interface, delegate, object, string Aloca\u00e7\u00e3o de Mem\u00f3ria Est\u00e1tica Din\u00e2mica Como \u00e9 armazenado? Diretamente Indiretamente Vari\u00e1veis redimension\u00e1veis? N\u00e3o Sim Velocidade de acesso R\u00e1pido Lento Aloca\u00e7\u00e3o A aloca\u00e7\u00e3o de blocos \u00e9 reservada em LIFO. O bloco mais recente (topo) \u00e9 o pr\u00f3ximo a ser liberado Aloca\u00e7\u00e3o de blocos \u00e9 livre e pode ocorrer a qualquer momento Visibilidade Somente \u00e9 acess\u00edvel para a thread do propiet\u00e1rio Vis\u00edvel para todas as threads Chamadas recursivas? Recurs\u00e3o causa incremento de pilha e pode aumentar o consumo de mem\u00f3ria rapidamente Mem\u00f3ria \u00e9 ocupada lentamente Usada por? Pode ser usada por uma thread apenas Pode ser usada em todas as partes da aplica\u00e7\u00e3o StackOverflowException .NET Runtime lan\u00e7a a exce\u00e7\u00e3o quando n\u00e3o h\u00e1 mais espa\u00e7o na stack --- Quando os dados s\u00e3o limpos? Assim que o escopo onde as vari\u00e1veis foram criadas \u00e9 terminado. --- public void Metodo() { int a = 10; // Stack int b = 20; // Stack var obj = new Classe(); // Refer\u00eancia na Stack e inst\u00e2ncia no Heap } Refer\u00eancias Saeed Esmaeelinejad Stack vs Heap Memory - C#","title":"Stack/Heap"},{"location":"03/03_02_stack_vs_heap/#porque-a-stack-e-mais-rapida-que-o-heap","text":"","title":"Porque a stack \u00e9 mais r\u00e1pida que o heap?"},{"location":"03/03_02_stack_vs_heap/#fato-ambos-stack-e-heap-estao-na-ram-entao-porque-a-stack-e-mais-rapida-do-que-o-heap","text":"Resposta abstrata: Est\u00e1 relacionado a COMO elas s\u00e3o alocadas na mem\u00f3ria.","title":"Fato: Ambos, stack e heap, est\u00e3o na RAM. Ent\u00e3o, porque a stack \u00e9 mais r\u00e1pida do que o heap?"},{"location":"03/03_02_stack_vs_heap/#stack","text":"Stack \u00e9 um espa\u00e7o cont\u00edguo na mem\u00f3ria, uma \u00e1rea sequencial de 1MB (em sistemas de 32 bits) ou 4MB (em sistemas de 64 bits), e mesmo em linguagens sem gerenciamento de mem\u00f3ria, \u00e9 controlada pela pr\u00f3pria linguagem, sem demandar interven\u00e7\u00e3o manual para aloca\u00e7\u00e3o e desaloca\u00e7\u00e3o. Ent\u00e3o, o stack tem tamanho limitado e exatamente por esta raz\u00e3o, voc\u00ea pode ter encontrado alguma exce\u00e7\u00e3o do tipo StackOverflowException .","title":"Stack"},{"location":"03/03_02_stack_vs_heap/#heap","text":"Diferentemente do stack, o heap n\u00e3o \u00e9 um espa\u00e7o cont\u00edguo. \u00c9 uma cole\u00e7\u00e3o de segmentos de mem\u00f3ria que podem estar ou n\u00e3o pr\u00f3ximos uns dos outros. Tamb\u00e9m n\u00e3o tem tamanho fixo, expandindo e encolhendo de acordo com a demanda. Ent\u00e3o, porque n\u00e3o usamos apenas o heap e nos livramos da limita\u00e7\u00e3o de espa\u00e7o do stack? Porque, exatamente por ter tamanho vari\u00e1vel e ser distribu\u00edda por v\u00e1rios blocos, a leitura e escrita no heap \u00e9 muito mais lenta, mas ainda, vital para nosso c\u00f3digo funcionar. No stack, sendo uma \u00e1rea cont\u00edgua, sua aplica\u00e7\u00e3o \"sabe\" onde vai encontrar os valores em mem\u00f3ria, mas no caso do Heap, ter\u00e1 que fazer a busca pelos dados na mem\u00f3ria atrav\u00e9s de endere\u00e7amento.","title":"Heap"},{"location":"03/03_02_stack_vs_heap/#garbage-collector","text":"O GC vai limpar ambos o Stack e o Heap? N\u00e3o. O GC somente limpa o Heap e n\u00e3o afeta o stack. O trabalho principal do GC \u00e9 automaticamente rastrear e gerenciar a mem\u00f3ria que foi alocada no heap pelo programa. O stack, por outro lado, \u00e9 gerenciado automaticamente pelo sistema. O GC \u00e9 uma thread especial criada pelo .NET Runtime para monitorar aloca\u00e7\u00f5es no heap. Cada refer\u00eancia numa stack a uma aloca\u00e7\u00e3o no heap \u00e9 contada. Quando uma aloca\u00e7\u00e3o no stack \u00e9 encerrada, decrementa a refer\u00eancia daquele objeto no heap. Quando um objeto no heap tem o contador de refer\u00eancias zerado, ele se torna um candidato para o GC fazer a limpeza.","title":"Garbage Collector"},{"location":"03/03_02_stack_vs_heap/#diferencas","text":"","title":"Diferen\u00e7as"},{"location":"03/03_02_stack_vs_heap/#categoria","text":"Categoria Stack Heap O que \u00e9? \u00c9 um array de mem\u00f3ria. \u00c9 uma estrutura LIFO. Dados somente podem ser adicionados e deletados do topo. \u00c9 uma \u00e1rea de mem\u00f3ria onde peda\u00e7os s\u00e3o alocados para armazenar certos tipos de objetos de dados. Dados podem ser adicionados e removidos em qualquer hora. Como \u00e9 gerenciado? Cen\u00e1rio pr\u00e1tico Valor da vari\u00e1vel armazenado na stack Valor da vari\u00e1vel armazenada no heap e ponteiro para informa\u00e7\u00e3o armazenada na stack O que vai l\u00e1 dentro? Descendentes de System.ValueType: bool, byte, char, decimal, double, enum, float, int, long, sbyte, short, struct, uint, ulong, ushort Tipos por refer\u00eancia, descendentes de System.Object: class, interface, delegate, object, string Aloca\u00e7\u00e3o de Mem\u00f3ria Est\u00e1tica Din\u00e2mica Como \u00e9 armazenado? Diretamente Indiretamente Vari\u00e1veis redimension\u00e1veis? N\u00e3o Sim Velocidade de acesso R\u00e1pido Lento Aloca\u00e7\u00e3o A aloca\u00e7\u00e3o de blocos \u00e9 reservada em LIFO. O bloco mais recente (topo) \u00e9 o pr\u00f3ximo a ser liberado Aloca\u00e7\u00e3o de blocos \u00e9 livre e pode ocorrer a qualquer momento Visibilidade Somente \u00e9 acess\u00edvel para a thread do propiet\u00e1rio Vis\u00edvel para todas as threads Chamadas recursivas? Recurs\u00e3o causa incremento de pilha e pode aumentar o consumo de mem\u00f3ria rapidamente Mem\u00f3ria \u00e9 ocupada lentamente Usada por? Pode ser usada por uma thread apenas Pode ser usada em todas as partes da aplica\u00e7\u00e3o StackOverflowException .NET Runtime lan\u00e7a a exce\u00e7\u00e3o quando n\u00e3o h\u00e1 mais espa\u00e7o na stack --- Quando os dados s\u00e3o limpos? Assim que o escopo onde as vari\u00e1veis foram criadas \u00e9 terminado. --- public void Metodo() { int a = 10; // Stack int b = 20; // Stack var obj = new Classe(); // Refer\u00eancia na Stack e inst\u00e2ncia no Heap }","title":"Categoria"},{"location":"03/03_02_stack_vs_heap/#referencias","text":"Saeed Esmaeelinejad Stack vs Heap Memory - C#","title":"Refer\u00eancias"},{"location":"04/04_01_configuracoes/","text":"Configura\u00e7\u00f5es Nossos sistemas devem ser flex\u00edveis para se adequar aos diversos ambientes onde eles ser\u00e3o utilizados. Dessa forma, segundo as boas pr\u00e1ticas do The Twelve-Factor App , as configura\u00e7\u00f5es s\u00e3o tudo que varia entre os deploys , incluindo: Recursos para bases de dados, servi\u00e7os de cache, filas, etc. Credenciais para servi\u00e7os externos (APIs, WebServices, etc) Valores de uso no deploy (informa\u00e7\u00f5es como nome do ambiente, flags para modifica\u00e7\u00e3o de comportamento, etc) Uma viola\u00e7\u00e3o dessa regra do TTFA \u00e9 o uso de constantes no c\u00f3digo para armazenar estas configura\u00e7\u00f5es. Ela exige que haja uma estrita separa\u00e7\u00e3o entre configura\u00e7\u00e3o e c\u00f3digo. O TTFA recomenda que sejam utilizadas vari\u00e1veis de ambiente do sistema operacional para que as configura\u00e7\u00f5es sejam informadas \u00e0 nossa aplica\u00e7\u00e3o. O uso de arquivos de configura\u00e7\u00e3o tamb\u00e9m pode ser utilizado, desde que seu conte\u00fado n\u00e3o sofra mudan\u00e7a entre deploys , como por exemplo uma configura\u00e7\u00e3o de endpoints. As aplica\u00e7\u00f5es DotNet tem por padr\u00e3o usar arquivos appsettings.json, como no exemplo abaixo: { \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.Hosting.Lifetime\": \"Information\" } } } Vari\u00e1veis de ambiente No nosso contexto, vamos nos ater ao uso de vari\u00e1veis de ambiente e classes de configura\u00e7\u00e3o personalizadas para a nossa aplica\u00e7\u00e3o. Do ingl\u00eas environment variable , costumamos chamar essas vari\u00e1veis de env pra facilitar. Um tipo especial de env \u00e9 a que cont\u00e9m dados sens\u00edveis, como string de conex\u00e3o com um banco de dados ou broker de mensageria, ou uma credencial de acesso a um servi\u00e7o externo. Essas envs , chamamos de secrets . Envs em ambiente de desenvolvimento As IDE\u00b4s de desenvolvimento, como o Visual Studio, Rider, e at\u00e9 editores mais simples possibilitam que sejam disponibilizadas as envs durante a execu\u00e7\u00e3o e debug da nossa aplica\u00e7\u00e3o. Para isso podemos armazenar essas informa\u00e7\u00f5es em arquivos espec\u00edficos. O aspnet prop\u00f5e como arquivo default o launchSettings.json que fica na pasta Properties do projeto em execu\u00e7\u00e3o. Um exemplo desse arquivo: { \"profiles\": { \"EnvironmentSampleProject\": { \"commandName\": \"Project\", \"dotnetRunMessages\": true, \"environmentVariables\": { \"DOTNET_ENVIRONMENT\": \"Development\", \"AMBIENTE\": \"desenvolvimento\" } } } } No que nos interessa, \u00e9 o objeto environmentVariables que cont\u00e9m um dicion\u00e1rio de nomes de vari\u00e1veis e seus conte\u00fados que ser\u00e3o utilizados na aplica\u00e7\u00e3o. Neste exemplo, durante a execu\u00e7\u00e3o, a vari\u00e1vel de ambiente DOTNET_ENVIRONMENT ter\u00e1 o valor Development . Outra forma, n\u00e3o t\u00e3o comum no ambiente dotnet, \u00e9 o uso de arquivos . env na raiz do projeto com as vari\u00e1veis no formato simples CHAVE=VALOR. DOTNET_ENVIRONMENT=Development AMBIENTE=desenvolvimento Estes arquivos . env n\u00e3o s\u00e3o lidos automaticamente pelas IDE\u00b4s, mas atrav\u00e9s de plugins podemos conseguir o mesmo efeito. Tanto o arquivo launchSettings.json quanto o . env nunca devem ser inclu\u00eddos nos commits para evitar que secrets sejam vazadas. Acessando uma env em C# O namespace Environment nos disponibiliza o m\u00e9todo GetEnvironmentVariable, que utilizaremos para acessar a informa\u00e7\u00e3o. var ambiente = Environment.GetEnvironmentVariable(\"AMBIENTE\"); Console.Writeline(ambiente); // desenvolvimento Aten\u00e7\u00e3o O retorno da fun\u00e7\u00e3o GetEnvironmentVariable \u00e9 uma string nul\u00e1vel , que significa que caso a vari\u00e1vel de ambiente n\u00e3o esteja definida, o retorno ser\u00e1 null . Valida\u00e7\u00e3o \u00e9 importante!","title":"Inter 2 - Configura\u00e7\u00f5es"},{"location":"04/04_01_configuracoes/#configuracoes","text":"Nossos sistemas devem ser flex\u00edveis para se adequar aos diversos ambientes onde eles ser\u00e3o utilizados. Dessa forma, segundo as boas pr\u00e1ticas do The Twelve-Factor App , as configura\u00e7\u00f5es s\u00e3o tudo que varia entre os deploys , incluindo: Recursos para bases de dados, servi\u00e7os de cache, filas, etc. Credenciais para servi\u00e7os externos (APIs, WebServices, etc) Valores de uso no deploy (informa\u00e7\u00f5es como nome do ambiente, flags para modifica\u00e7\u00e3o de comportamento, etc) Uma viola\u00e7\u00e3o dessa regra do TTFA \u00e9 o uso de constantes no c\u00f3digo para armazenar estas configura\u00e7\u00f5es. Ela exige que haja uma estrita separa\u00e7\u00e3o entre configura\u00e7\u00e3o e c\u00f3digo. O TTFA recomenda que sejam utilizadas vari\u00e1veis de ambiente do sistema operacional para que as configura\u00e7\u00f5es sejam informadas \u00e0 nossa aplica\u00e7\u00e3o. O uso de arquivos de configura\u00e7\u00e3o tamb\u00e9m pode ser utilizado, desde que seu conte\u00fado n\u00e3o sofra mudan\u00e7a entre deploys , como por exemplo uma configura\u00e7\u00e3o de endpoints. As aplica\u00e7\u00f5es DotNet tem por padr\u00e3o usar arquivos appsettings.json, como no exemplo abaixo: { \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.Hosting.Lifetime\": \"Information\" } } }","title":"Configura\u00e7\u00f5es"},{"location":"04/04_01_configuracoes/#variaveis-de-ambiente","text":"No nosso contexto, vamos nos ater ao uso de vari\u00e1veis de ambiente e classes de configura\u00e7\u00e3o personalizadas para a nossa aplica\u00e7\u00e3o. Do ingl\u00eas environment variable , costumamos chamar essas vari\u00e1veis de env pra facilitar. Um tipo especial de env \u00e9 a que cont\u00e9m dados sens\u00edveis, como string de conex\u00e3o com um banco de dados ou broker de mensageria, ou uma credencial de acesso a um servi\u00e7o externo. Essas envs , chamamos de secrets .","title":"Vari\u00e1veis de ambiente"},{"location":"04/04_01_configuracoes/#envs-em-ambiente-de-desenvolvimento","text":"As IDE\u00b4s de desenvolvimento, como o Visual Studio, Rider, e at\u00e9 editores mais simples possibilitam que sejam disponibilizadas as envs durante a execu\u00e7\u00e3o e debug da nossa aplica\u00e7\u00e3o. Para isso podemos armazenar essas informa\u00e7\u00f5es em arquivos espec\u00edficos. O aspnet prop\u00f5e como arquivo default o launchSettings.json que fica na pasta Properties do projeto em execu\u00e7\u00e3o. Um exemplo desse arquivo: { \"profiles\": { \"EnvironmentSampleProject\": { \"commandName\": \"Project\", \"dotnetRunMessages\": true, \"environmentVariables\": { \"DOTNET_ENVIRONMENT\": \"Development\", \"AMBIENTE\": \"desenvolvimento\" } } } } No que nos interessa, \u00e9 o objeto environmentVariables que cont\u00e9m um dicion\u00e1rio de nomes de vari\u00e1veis e seus conte\u00fados que ser\u00e3o utilizados na aplica\u00e7\u00e3o. Neste exemplo, durante a execu\u00e7\u00e3o, a vari\u00e1vel de ambiente DOTNET_ENVIRONMENT ter\u00e1 o valor Development . Outra forma, n\u00e3o t\u00e3o comum no ambiente dotnet, \u00e9 o uso de arquivos . env na raiz do projeto com as vari\u00e1veis no formato simples CHAVE=VALOR. DOTNET_ENVIRONMENT=Development AMBIENTE=desenvolvimento Estes arquivos . env n\u00e3o s\u00e3o lidos automaticamente pelas IDE\u00b4s, mas atrav\u00e9s de plugins podemos conseguir o mesmo efeito. Tanto o arquivo launchSettings.json quanto o . env nunca devem ser inclu\u00eddos nos commits para evitar que secrets sejam vazadas.","title":"Envs em ambiente de desenvolvimento"},{"location":"04/04_01_configuracoes/#acessando-uma-env-em-c","text":"O namespace Environment nos disponibiliza o m\u00e9todo GetEnvironmentVariable, que utilizaremos para acessar a informa\u00e7\u00e3o. var ambiente = Environment.GetEnvironmentVariable(\"AMBIENTE\"); Console.Writeline(ambiente); // desenvolvimento Aten\u00e7\u00e3o O retorno da fun\u00e7\u00e3o GetEnvironmentVariable \u00e9 uma string nul\u00e1vel , que significa que caso a vari\u00e1vel de ambiente n\u00e3o esteja definida, o retorno ser\u00e1 null . Valida\u00e7\u00e3o \u00e9 importante!","title":"Acessando uma env em C#"},{"location":"04/04_02_classe/","text":"Classe de configura\u00e7\u00e3o Para manter as vari\u00e1veis de configura\u00e7\u00e3o organizadas, podemos agrup\u00e1-las em uma classe especializada em ler e validar os dados que precisamos. Inicialmente, vamos desenvolver usando c\u00f3digo nativo, expl\u00edcito para a fun\u00e7\u00e3o que desejamos. Mais tarde, vamos abordar as op\u00e7\u00f5es que o aspnet oferece. Contexto Consideremos que nossa aplica\u00e7\u00e3o tem algumas configura\u00e7\u00f5es espec\u00edficas: Vari\u00e1vel Descri\u00e7\u00e3o Tipo Valida\u00e7\u00e3o DB_CONNECTION_STRING String de Conex\u00e3o ao banco de dados string Deve iniciar com \"mongodb://\" MAX_CONNECTED_USERS N\u00famero m\u00e1ximo de usu\u00e1rios int Deve ser um inteiro entre 10 e 1000 DEBUG Flag para gera\u00e7\u00e3o de informa\u00e7\u00f5es de debug bool True deve ser representado por \"1\" Para tanto, criaremos uma classe que receber\u00e1 estes dados: public record ConfigClass { public string DbConnectionString { get; } public int MaxConnectedUsers { get; } public bool Debug { get; } public ConfigClass() { DbConnectionString = Environment.GetEnvironmentVariable(\"DB_CONNECTION_STRING\"); MaxConnectedUsers = int.Parse(Environment.GetEnvironmentVariable(\"MAX_CONNECTED_USERS\")); Debug = Environment.GetEnvironmentVariable(\"DEBUG\") == \"1\"; } }","title":"Inter 3 - Classes de configura\u00e7\u00e3o"},{"location":"04/04_02_classe/#classe-de-configuracao","text":"Para manter as vari\u00e1veis de configura\u00e7\u00e3o organizadas, podemos agrup\u00e1-las em uma classe especializada em ler e validar os dados que precisamos. Inicialmente, vamos desenvolver usando c\u00f3digo nativo, expl\u00edcito para a fun\u00e7\u00e3o que desejamos. Mais tarde, vamos abordar as op\u00e7\u00f5es que o aspnet oferece.","title":"Classe de configura\u00e7\u00e3o"},{"location":"04/04_02_classe/#contexto","text":"Consideremos que nossa aplica\u00e7\u00e3o tem algumas configura\u00e7\u00f5es espec\u00edficas: Vari\u00e1vel Descri\u00e7\u00e3o Tipo Valida\u00e7\u00e3o DB_CONNECTION_STRING String de Conex\u00e3o ao banco de dados string Deve iniciar com \"mongodb://\" MAX_CONNECTED_USERS N\u00famero m\u00e1ximo de usu\u00e1rios int Deve ser um inteiro entre 10 e 1000 DEBUG Flag para gera\u00e7\u00e3o de informa\u00e7\u00f5es de debug bool True deve ser representado por \"1\" Para tanto, criaremos uma classe que receber\u00e1 estes dados: public record ConfigClass { public string DbConnectionString { get; } public int MaxConnectedUsers { get; } public bool Debug { get; } public ConfigClass() { DbConnectionString = Environment.GetEnvironmentVariable(\"DB_CONNECTION_STRING\"); MaxConnectedUsers = int.Parse(Environment.GetEnvironmentVariable(\"MAX_CONNECTED_USERS\")); Debug = Environment.GetEnvironmentVariable(\"DEBUG\") == \"1\"; } }","title":"Contexto"},{"location":"08/00.projeto/","text":"Projeto: Aplica\u00e7\u00e3o de Apura\u00e7\u00e3o de Votos Para controlar os dados de uma elei\u00e7\u00e3o vamos desenvolver um projeto de microsservi\u00e7os para a coleta, processamento e apresenta\u00e7\u00e3o de resultados. Dom\u00ednio Elei\u00e7\u00e3o = Processo de Vota\u00e7\u00e3o + Apura\u00e7\u00e3o de votos Candidato = Pessoa candidata a um cargo Eleitor = Pessoa que vota em um candidato Vota\u00e7\u00e3o = coleta de votos em uma se\u00e7\u00e3o Voto = Registro da inten\u00e7\u00e3o de um eleitor. \u00danico por Eleitor/Vota\u00e7\u00e3o Arquitetura Contexto Inicial A coleta dos votos ser\u00e1 feita por um microsservi\u00e7o ( PROVIDER ) A contagem ser\u00e1 feita por um microsservi\u00e7o ( COUNTER ) A apresenta\u00e7\u00e3o dos dados ser\u00e1 disponibilizada por uma API ( API ) A apresenta\u00e7\u00e3o dos dados da elei\u00e7\u00e3o ser\u00e3o feitas por uma API com os seguintes endpoints: GET /eleicao/{id_votacao} status = {inexistente, iniciado, ocorrendo, finalizado} resultados = [candidatos+contagem de votos], classificacao:{primeiro_lugar, segundo_lugar}, brancos_nulos { \"status\":\"...\", \"resultados\":[ {\"id_candidato\":0,\"nome\":\"\",\"votos\":0} ], \"classificacao\":{ \"primeiro\":{\"id_candidato\":0,\"nome\".\"votos\":0}, \"segundo\":{\"id_candidato\":0,\"nome\".\"votos\":0} }, \"brancos_nulos\": 0, \"eleitores\": { \"comparecendo\": 0, \"ausentes\": 0 } } Retornando uma lista de objetos com os candidatos e seus votos recebidos, o(s) candidato(s) mais candidatos (1 ou 2). Modelos de Dados Vota\u00e7\u00e3o id nome candidatos eleitors { \"id\":0, \"nome\":\"\", \"candidatos\":[ { \"id\":0, \"nome\":\"\" }], \"eleitors\":[ { \"id\":0, \"nome\":\"\" }] } Candidato id nome { \"id\":0, \"nome\":\"\" } Eleitor id nome { \"id\":0, \"nome\":\"\" } Voto id_votacao id_eleitor id_candidato { \"id_votacao\":0, \"id_eleitor\":0, \"id_candidato\":0 } Mensagens In\u00edcio da vota\u00e7\u00e3o header -> tipo=inicio conte\u00fado -> Vota\u00e7\u00e3o (json) Fim da vota\u00e7\u00e3o header -> tipo=fim conte\u00fado -> { id: 0 } Voto header -> tipo=voto conte\u00fado -> Voto (json)","title":"Projeto"},{"location":"08/00.projeto/#projeto-aplicacao-de-apuracao-de-votos","text":"Para controlar os dados de uma elei\u00e7\u00e3o vamos desenvolver um projeto de microsservi\u00e7os para a coleta, processamento e apresenta\u00e7\u00e3o de resultados.","title":"Projeto: Aplica\u00e7\u00e3o de Apura\u00e7\u00e3o de Votos"},{"location":"08/00.projeto/#dominio","text":"Elei\u00e7\u00e3o = Processo de Vota\u00e7\u00e3o + Apura\u00e7\u00e3o de votos Candidato = Pessoa candidata a um cargo Eleitor = Pessoa que vota em um candidato Vota\u00e7\u00e3o = coleta de votos em uma se\u00e7\u00e3o Voto = Registro da inten\u00e7\u00e3o de um eleitor. \u00danico por Eleitor/Vota\u00e7\u00e3o","title":"Dom\u00ednio"},{"location":"08/00.projeto/#arquitetura","text":"","title":"Arquitetura"},{"location":"08/00.projeto/#contexto-inicial","text":"A coleta dos votos ser\u00e1 feita por um microsservi\u00e7o ( PROVIDER ) A contagem ser\u00e1 feita por um microsservi\u00e7o ( COUNTER ) A apresenta\u00e7\u00e3o dos dados ser\u00e1 disponibilizada por uma API ( API ) A apresenta\u00e7\u00e3o dos dados da elei\u00e7\u00e3o ser\u00e3o feitas por uma API com os seguintes endpoints: GET /eleicao/{id_votacao} status = {inexistente, iniciado, ocorrendo, finalizado} resultados = [candidatos+contagem de votos], classificacao:{primeiro_lugar, segundo_lugar}, brancos_nulos { \"status\":\"...\", \"resultados\":[ {\"id_candidato\":0,\"nome\":\"\",\"votos\":0} ], \"classificacao\":{ \"primeiro\":{\"id_candidato\":0,\"nome\".\"votos\":0}, \"segundo\":{\"id_candidato\":0,\"nome\".\"votos\":0} }, \"brancos_nulos\": 0, \"eleitores\": { \"comparecendo\": 0, \"ausentes\": 0 } } Retornando uma lista de objetos com os candidatos e seus votos recebidos, o(s) candidato(s) mais candidatos (1 ou 2).","title":"Contexto Inicial"},{"location":"08/00.projeto/#modelos-de-dados","text":"","title":"Modelos de Dados"},{"location":"08/00.projeto/#votacao","text":"id nome candidatos eleitors { \"id\":0, \"nome\":\"\", \"candidatos\":[ { \"id\":0, \"nome\":\"\" }], \"eleitors\":[ { \"id\":0, \"nome\":\"\" }] }","title":"Vota\u00e7\u00e3o"},{"location":"08/00.projeto/#candidato","text":"id nome { \"id\":0, \"nome\":\"\" }","title":"Candidato"},{"location":"08/00.projeto/#eleitor","text":"id nome { \"id\":0, \"nome\":\"\" }","title":"Eleitor"},{"location":"08/00.projeto/#voto","text":"id_votacao id_eleitor id_candidato { \"id_votacao\":0, \"id_eleitor\":0, \"id_candidato\":0 }","title":"Voto"},{"location":"08/00.projeto/#mensagens","text":"","title":"Mensagens"},{"location":"08/00.projeto/#inicio-da-votacao","text":"header -> tipo=inicio conte\u00fado -> Vota\u00e7\u00e3o (json)","title":"In\u00edcio da vota\u00e7\u00e3o"},{"location":"08/00.projeto/#fim-da-votacao","text":"header -> tipo=fim conte\u00fado -> { id: 0 }","title":"Fim da vota\u00e7\u00e3o"},{"location":"08/00.projeto/#voto_1","text":"header -> tipo=voto conte\u00fado -> Voto (json)","title":"Voto"}]}